import * as wasm from './prophecies_bg.wasm';

const lTextDecoder = typeof TextDecoder === 'undefined' ? (0, module.require)('util').TextDecoder : TextDecoder;

let cachedTextDecoder = new lTextDecoder('utf-8', { ignoreBOM: true, fatal: true });

cachedTextDecoder.decode();

let cachegetUint8Memory0 = null;
function getUint8Memory0() {
    if (cachegetUint8Memory0 === null || cachegetUint8Memory0.buffer !== wasm.memory.buffer) {
        cachegetUint8Memory0 = new Uint8Array(wasm.memory.buffer);
    }
    return cachegetUint8Memory0;
}

function getStringFromWasm0(ptr, len) {
    return cachedTextDecoder.decode(getUint8Memory0().subarray(ptr, ptr + len));
}

const heap = new Array(32).fill(undefined);

heap.push(undefined, null, true, false);

let heap_next = heap.length;

function addHeapObject(obj) {
    if (heap_next === heap.length) heap.push(heap.length + 1);
    const idx = heap_next;
    heap_next = heap[idx];

    heap[idx] = obj;
    return idx;
}

function getObject(idx) { return heap[idx]; }

function dropObject(idx) {
    if (idx < 36) return;
    heap[idx] = heap_next;
    heap_next = idx;
}

function takeObject(idx) {
    const ret = getObject(idx);
    dropObject(idx);
    return ret;
}

function _assertClass(instance, klass) {
    if (!(instance instanceof klass)) {
        throw new Error(`expected instance of ${klass.name}`);
    }
    return instance.ptr;
}

let cachegetInt32Memory0 = null;
function getInt32Memory0() {
    if (cachegetInt32Memory0 === null || cachegetInt32Memory0.buffer !== wasm.memory.buffer) {
        cachegetInt32Memory0 = new Int32Array(wasm.memory.buffer);
    }
    return cachegetInt32Memory0;
}

const u32CvtShim = new Uint32Array(2);

const uint64CvtShim = new BigUint64Array(u32CvtShim.buffer);

function isLikeNone(x) {
    return x === undefined || x === null;
}

let cachegetUint32Memory0 = null;
function getUint32Memory0() {
    if (cachegetUint32Memory0 === null || cachegetUint32Memory0.buffer !== wasm.memory.buffer) {
        cachegetUint32Memory0 = new Uint32Array(wasm.memory.buffer);
    }
    return cachegetUint32Memory0;
}

function getArrayU32FromWasm0(ptr, len) {
    return getUint32Memory0().subarray(ptr / 4, ptr / 4 + len);
}

let WASM_VECTOR_LEN = 0;

const lTextEncoder = typeof TextEncoder === 'undefined' ? (0, module.require)('util').TextEncoder : TextEncoder;

let cachedTextEncoder = new lTextEncoder('utf-8');

const encodeString = (typeof cachedTextEncoder.encodeInto === 'function'
    ? function (arg, view) {
    return cachedTextEncoder.encodeInto(arg, view);
}
    : function (arg, view) {
    const buf = cachedTextEncoder.encode(arg);
    view.set(buf);
    return {
        read: arg.length,
        written: buf.length
    };
});

function passStringToWasm0(arg, malloc, realloc) {

    if (realloc === undefined) {
        const buf = cachedTextEncoder.encode(arg);
        const ptr = malloc(buf.length);
        getUint8Memory0().subarray(ptr, ptr + buf.length).set(buf);
        WASM_VECTOR_LEN = buf.length;
        return ptr;
    }

    let len = arg.length;
    let ptr = malloc(len);

    const mem = getUint8Memory0();

    let offset = 0;

    for (; offset < len; offset++) {
        const code = arg.charCodeAt(offset);
        if (code > 0x7F) break;
        mem[ptr + offset] = code;
    }

    if (offset !== len) {
        if (offset !== 0) {
            arg = arg.slice(offset);
        }
        ptr = realloc(ptr, len, len = offset + arg.length * 3);
        const view = getUint8Memory0().subarray(ptr + offset, ptr + len);
        const ret = encodeString(arg, view);

        offset += ret.written;
    }

    WASM_VECTOR_LEN = offset;
    return ptr;
}

function handleError(f) {
    return function () {
        try {
            return f.apply(this, arguments);

        } catch (e) {
            wasm.__wbindgen_exn_store(addHeapObject(e));
        }
    };
}

function getArrayU8FromWasm0(ptr, len) {
    return getUint8Memory0().subarray(ptr / 1, ptr / 1 + len);
}
/**
*/
export class WasmAction {

    static __wrap(ptr) {
        const obj = Object.create(WasmAction.prototype);
        obj.ptr = ptr;

        return obj;
    }

    free() {
        const ptr = this.ptr;
        this.ptr = 0;

        wasm.__wbg_wasmaction_free(ptr);
    }
    /**
    * @returns {number}
    */
    get row() {
        var ret = wasm.__wbg_get_wasmaction_row(this.ptr);
        return ret >>> 0;
    }
    /**
    * @param {number} arg0
    */
    set row(arg0) {
        wasm.__wbg_set_wasmaction_row(this.ptr, arg0);
    }
    /**
    * @returns {number}
    */
    get col() {
        var ret = wasm.__wbg_get_wasmaction_col(this.ptr);
        return ret >>> 0;
    }
    /**
    * @param {number} arg0
    */
    set col(arg0) {
        wasm.__wbg_set_wasmaction_col(this.ptr, arg0);
    }
    /**
    * @returns {number}
    */
    get guess() {
        var ret = wasm.__wbg_get_wasmaction_guess(this.ptr);
        return ret >>> 0;
    }
    /**
    * @param {number} arg0
    */
    set guess(arg0) {
        wasm.__wbg_set_wasmaction_guess(this.ptr, arg0);
    }
}
/**
*/
export class WasmBot {

    static __wrap(ptr) {
        const obj = Object.create(WasmBot.prototype);
        obj.ptr = ptr;

        return obj;
    }

    free() {
        const ptr = this.ptr;
        this.ptr = 0;

        wasm.__wbg_wasmbot_free(ptr);
    }
    /**
    * @returns {number}
    */
    get bot() {
        var ret = wasm.__wbg_get_wasmbot_bot(this.ptr);
        return ret;
    }
    /**
    * @param {number} arg0
    */
    set bot(arg0) {
        wasm.__wbg_set_wasmbot_bot(this.ptr, arg0);
    }
    /**
    * @param {number} nrows
    * @param {number} ncols
    * @param {number} me
    * @returns {WasmBot}
    */
    static new(nrows, ncols, me) {
        var ret = wasm.wasmbot_new(nrows, ncols, me);
        return WasmBot.__wrap(ret);
    }
    /**
    * @returns {boolean}
    */
    is_finished() {
        var ret = wasm.wasmbot_is_finished(this.ptr);
        return ret !== 0;
    }
    /**
    * @returns {Uint32Array}
    */
    get_scores() {
        wasm.wasmbot_get_scores(8, this.ptr);
        var r0 = getInt32Memory0()[8 / 4 + 0];
        var r1 = getInt32Memory0()[8 / 4 + 1];
        var v0 = getArrayU32FromWasm0(r0, r1).slice();
        wasm.__wbindgen_free(r0, r1 * 4);
        return v0;
    }
    /**
    * @param {number} row
    * @param {number} col
    * @returns {WasmCell}
    */
    get_cell(row, col) {
        var ret = wasm.wasmbot_get_cell(this.ptr, row, col);
        return WasmCell.__wrap(ret);
    }
    /**
    * @param {number} row
    * @param {number} col
    * @param {number} guess
    */
    place(row, col, guess) {
        wasm.wasmbot_place(this.ptr, row, col, guess);
    }
    /**
    */
    playout() {
        wasm.wasmbot_playout(this.ptr);
    }
    /**
    * @returns {number}
    */
    get_active_player() {
        var ret = wasm.wasmbot_get_active_player(this.ptr);
        return ret >>> 0;
    }
    /**
    * @returns {WasmEdge | undefined}
    */
    get_best_action() {
        var ret = wasm.wasmbot_get_best_action(this.ptr);
        return ret === 0 ? undefined : WasmEdge.__wrap(ret);
    }
}
/**
*/
export class WasmCell {

    static __wrap(ptr) {
        const obj = Object.create(WasmCell.prototype);
        obj.ptr = ptr;

        return obj;
    }

    free() {
        const ptr = this.ptr;
        this.ptr = 0;

        wasm.__wbg_wasmcell_free(ptr);
    }
    /**
    * @returns {number | undefined}
    */
    get player() {
        wasm.__wbg_get_wasmcell_player(8, this.ptr);
        var r0 = getInt32Memory0()[8 / 4 + 0];
        var r1 = getInt32Memory0()[8 / 4 + 1];
        return r0 === 0 ? undefined : r1 >>> 0;
    }
    /**
    * @param {number | undefined} arg0
    */
    set player(arg0) {
        wasm.__wbg_set_wasmcell_player(this.ptr, !isLikeNone(arg0), isLikeNone(arg0) ? 0 : arg0);
    }
    /**
    * None for an empty cell, 0 for a crossed-out cell, otherwise a number between 1 and max(nrows, ncols)
    * @returns {number | undefined}
    */
    get guess() {
        wasm.__wbg_get_wasmcell_guess(8, this.ptr);
        var r0 = getInt32Memory0()[8 / 4 + 0];
        var r1 = getInt32Memory0()[8 / 4 + 1];
        return r0 === 0 ? undefined : r1 >>> 0;
    }
    /**
    * None for an empty cell, 0 for a crossed-out cell, otherwise a number between 1 and max(nrows, ncols)
    * @param {number | undefined} arg0
    */
    set guess(arg0) {
        wasm.__wbg_set_wasmcell_guess(this.ptr, !isLikeNone(arg0), isLikeNone(arg0) ? 0 : arg0);
    }
}
/**
*/
export class WasmEdge {

    static __wrap(ptr) {
        const obj = Object.create(WasmEdge.prototype);
        obj.ptr = ptr;

        return obj;
    }

    free() {
        const ptr = this.ptr;
        this.ptr = 0;

        wasm.__wbg_wasmedge_free(ptr);
    }
    /**
    * @returns {WasmAction}
    */
    get action() {
        var ret = wasm.__wbg_get_wasmedge_action(this.ptr);
        return WasmAction.__wrap(ret);
    }
    /**
    * @param {WasmAction} arg0
    */
    set action(arg0) {
        _assertClass(arg0, WasmAction);
        var ptr0 = arg0.ptr;
        arg0.ptr = 0;
        wasm.__wbg_set_wasmedge_action(this.ptr, ptr0);
    }
    /**
    * @returns {BigInt}
    */
    get visits() {
        wasm.__wbg_get_wasmedge_visits(8, this.ptr);
        var r0 = getInt32Memory0()[8 / 4 + 0];
        var r1 = getInt32Memory0()[8 / 4 + 1];
        u32CvtShim[0] = r0;
        u32CvtShim[1] = r1;
        const n0 = uint64CvtShim[0];
        return n0;
    }
    /**
    * @param {BigInt} arg0
    */
    set visits(arg0) {
        uint64CvtShim[0] = arg0;
        const low0 = u32CvtShim[0];
        const high0 = u32CvtShim[1];
        wasm.__wbg_set_wasmedge_visits(this.ptr, low0, high0);
    }
    /**
    * @returns {number}
    */
    get score() {
        var ret = wasm.__wbg_get_wasmedge_score(this.ptr);
        return ret;
    }
    /**
    * @param {number} arg0
    */
    set score(arg0) {
        wasm.__wbg_set_wasmedge_score(this.ptr, arg0);
    }
}

export const __wbindgen_string_new = function(arg0, arg1) {
    var ret = getStringFromWasm0(arg0, arg1);
    return addHeapObject(ret);
};

export const __wbg_new_59cb74e423758ede = function() {
    var ret = new Error();
    return addHeapObject(ret);
};

export const __wbg_stack_558ba5917b466edd = function(arg0, arg1) {
    var ret = getObject(arg1).stack;
    var ptr0 = passStringToWasm0(ret, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);
    var len0 = WASM_VECTOR_LEN;
    getInt32Memory0()[arg0 / 4 + 1] = len0;
    getInt32Memory0()[arg0 / 4 + 0] = ptr0;
};

export const __wbg_error_4bb6c2a97407129a = function(arg0, arg1) {
    try {
        console.error(getStringFromWasm0(arg0, arg1));
    } finally {
        wasm.__wbindgen_free(arg0, arg1);
    }
};

export const __wbindgen_object_drop_ref = function(arg0) {
    takeObject(arg0);
};

export const __wbg_getRandomValues_f5e14ab7ac8e995d = function(arg0, arg1, arg2) {
    getObject(arg0).getRandomValues(getArrayU8FromWasm0(arg1, arg2));
};

export const __wbg_randomFillSync_d5bd2d655fdf256a = function(arg0, arg1, arg2) {
    getObject(arg0).randomFillSync(getArrayU8FromWasm0(arg1, arg2));
};

export const __wbg_self_1b7a39e3a92c949c = handleError(function() {
    var ret = self.self;
    return addHeapObject(ret);
});

export const __wbg_require_604837428532a733 = function(arg0, arg1) {
    var ret = require(getStringFromWasm0(arg0, arg1));
    return addHeapObject(ret);
};

export const __wbg_crypto_968f1772287e2df0 = function(arg0) {
    var ret = getObject(arg0).crypto;
    return addHeapObject(ret);
};

export const __wbindgen_is_undefined = function(arg0) {
    var ret = getObject(arg0) === undefined;
    return ret;
};

export const __wbg_getRandomValues_a3d34b4fee3c2869 = function(arg0) {
    var ret = getObject(arg0).getRandomValues;
    return addHeapObject(ret);
};

export const __wbindgen_throw = function(arg0, arg1) {
    throw new Error(getStringFromWasm0(arg0, arg1));
};

export const __wbindgen_rethrow = function(arg0) {
    throw takeObject(arg0);
};

