/* tslint:disable */
/* eslint-disable */
/**
*/
export class WasmAction {
  free(): void;
/**
* @returns {number}
*/
  col: number;
/**
* @returns {number}
*/
  guess: number;
/**
* @returns {number}
*/
  row: number;
}
/**
*/
export class WasmBot {
  free(): void;
/**
* @param {number} nrows
* @param {number} ncols
* @param {number} me
* @returns {WasmBot}
*/
  static new(nrows: number, ncols: number, me: number): WasmBot;
/**
* @returns {boolean}
*/
  is_finished(): boolean;
/**
* @returns {Uint32Array}
*/
  get_scores(): Uint32Array;
/**
* @param {number} row
* @param {number} col
* @returns {WasmCell}
*/
  get_cell(row: number, col: number): WasmCell;
/**
* @param {number} row
* @param {number} col
* @param {number} guess
*/
  place(row: number, col: number, guess: number): void;
/**
*/
  playout(): void;
/**
* @returns {number}
*/
  get_active_player(): number;
/**
* @returns {WasmEdge | undefined}
*/
  get_best_action(): WasmEdge | undefined;
/**
* @returns {number}
*/
  bot: number;
}
/**
*/
export class WasmCell {
  free(): void;
/**
* None for an empty cell, 0 for a crossed-out cell, otherwise a number between 1 and max(nrows, ncols)
* @returns {number | undefined}
*/
  guess?: number;
/**
* @returns {number | undefined}
*/
  player?: number;
}
/**
*/
export class WasmEdge {
  free(): void;
/**
* @returns {WasmAction}
*/
  action: WasmAction;
/**
* @returns {number}
*/
  score: number;
/**
* @returns {BigInt}
*/
  visits: BigInt;
}
